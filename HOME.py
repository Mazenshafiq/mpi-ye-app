
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import json
import pandas as pd
import streamlit as st
import joblib
import pickle as pkl
import io
import base64
from io import BytesIO
from streamlit.components.v1 import html as st_html

from utils import load_model, read_table, feature_names_from_model, infer_schema_from_sample, cast_inputs, predict_with_model


st.set_page_config(
    page_title="ูุงุฌูุฉ ุชูุจุค ูููุฐุฌ ุงูุชุนูู ุงูุขูู",
    page_icon="๐ค",
    layout="wide"
)

# ูุงุฆูุฉ ุงูุตูุญุงุช
pages = st.sidebar.radio("ุงูุชูู ุฅูู:", ["ุญูู ","๐ฅ ุชูุจุฃ ุจุฃุณุฑุฉ ูุงุญุฏุฉ", "๐ ุชูุจุฃ ูุฃูุซุฑ ูู ุงุณุฑุฉ ูุงุญุฏุฉ"])

# ุงููุงุฌูุฉ ุงูุฃููู
if pages == "ุญูู ":
   st.title("ูุฑุญุจุงู ุจู ๐")
   st.markdown("""

    ููุง ุตูุญุฉ ุงูุชูุจุค ููููุฐุฌ ุงูููุฑ ูุชุนุฏุฏ ุงูุงุจุนุงุฏ ุงูุฎุงุต ุจุงูุฃุณุฑ ุงูููููุฉ ุชุชููุฑ ุฎุฏูุชูุง ุนุจุฑ ุทุฑููุชูู ููุง:
    1. **ุฅุฏุฎุงู ุจูุงูุงุช ุฃุณุฑุฉ ูุงุญุฏุฉ* ููุญุตูู ุนูู ูุชูุฌุฉ ููุฑูุฉ.
    2. **ุชูุจุค ูุฃุณุฑ ูุชุนุฏุฏุฉ** ุนุจุฑ ุฑูุน ููู Excel/CSVุ ูุณูุชู ุฅุถุงูุฉ ุนููุฏ ุจุงูุชูุจุคุงุช ูุชูุฒููู.

    > ุชูููุญุงุช ุณุฑูุนุฉ:
    > - ูู ูู ุตูุญุฉ ููููู ุฑูุน ููู ุงููููุฐุฌ ุงููุฏุฑุจ ุงู ูุงู ูุฏูู  ูููุฐุฌ ูุฏุฑุจ (`.pkl` ุฃู `.joblib`).
    > - ููุฌุฏ ูู ุงูุงุณูู ุชุนุฑููุงุช ุนู ุงููุชุบูุฑุงุช ู ุงูููู ุงููุฏุฎูุฉ.

    """)

   instructions = pd.DataFrame({
        "ุงููุชุบูุฑ": ["HH48A_HC3", "FC6A", "HC7A", "HC7B", "HC8", "HC9A", 
                    "HC9B", "HC9C", "HC10B", "HC10C", "HC10E", "HC11", "HC12", "HC13", "HC14", "HC15", "HC17",
                    "EU4", "WS1", "WS4", "WS7", "WS11", "WS15", "NU_malnutrition_hh", "HE_earlychild_hh", "HE_immune_hh", "HE_antecare_hh", "HE_birthassist_hh",
                        "ED_attendance_hh", "ED_completion_hh:", "ED_gradeforage_hh", "ED_adult_hh"],
        "ุงููุตู": [
            "ูุงุชุฌ ูุณูุฉ ุนุฏุฏ ุงูุงูุฑุงุฏ ุนูู ุนุฏุฏ ุงูุบุฑู",
            "ูู ุญุฏุซ ูุฐุง ุฎูุงู ุงูุฃุณุจูุนูู ุงููุงุถููู (30 ููููุง)ุ",
            "ูู ูุฏู ุงูุฃุณุฑุฉ ุฎุท ูุงุชู ุฃุฑุถูุ",
            "ูู ูุฏู ุงูุฃุณุฑุฉ ุฌูุงุฒ ุฑุงุฏููุ",
            "ูู ูุชููุฑ ูุฏู ุงูุฃุณุฑุฉ ุฅูุฏุงุฏ ููุฑุจุงุฆูุ",
            "ูู ูุฏู ุงูุฃุณุฑุฉ ุฌูุงุฒ ุชููุฒูููุ",
            "ูู ูุฏู ุงูุฃุณุฑุฉ ุซูุงุฌุฉุ",
            "ูู ูุฏู ุงูุฃุณุฑุฉ ุบุณุงูุฉ ููุงุจุณุ",
            "ูู ูููู ุฃุญุฏ ุฃูุฑุงุฏ ุงูุฃุณุฑุฉ ุฏุฑุงุฌุฉ ููุงุฆูุฉุ",
            "ูู ูููู ุฃุญุฏ ุฃูุฑุงุฏ ุงูุฃุณุฑุฉ ุฏุฑุงุฌุฉ ูุงุฑูุฉ ุฃู ุฏุฑุงุฌุฉ ุจุฎุงุฑูุฉุ",
            "ูู ูููู ุฃุญุฏ ุฃูุฑุงุฏ ุงูุฃุณุฑุฉ ุณูุงุฑุฉ ุฃู ุดุงุญูุฉ ุฃู ุจุงุต ุตุบูุฑุ",
            " ูู ูููู ุฃุญุฏ ุฃูุฑุงุฏ ุงูุฃุณุฑุฉ ุฌูุงุฒ ููุจููุชุฑุ",
            "ูู ูููู ุฃุญุฏ ุฃูุฑุงุฏ ุงูุฃุณุฑุฉ ูุงุชููุง ูุญููููุงุ",
            "ูู ูุชููุฑ ูุฏู ุงูุฃุณุฑุฉ ุฎุฏูุฉ ุฅูุชุฑูุช ูู ุงูููุฒูุ",
            "ูู ุชูุชูู ุงูุฃุณุฑุฉ ุงูููุฒู ุงูุฐู ุชุณูู ูููุ",
            "ูู ูููู ุฃุญุฏ ุฃูุฑุงุฏ ุงูุฃุณุฑุฉ ุฃุฑุถูุง ุฒุฑุงุนูุฉุ",
            "ูู ุชูุชูู ุงูุฃุณุฑุฉ ุฃู ุญููุงูุงุชุ",
            "ููุน ูุตุฏุฑ ุงูุทุงูุฉ ุงููุณุชุฎุฏู ูู ุงููููุฏ",
            "ุงููุตุฏุฑ ุงูุฑุฆูุณู ูููุงู ุงูุดุฑุจ",
            "ุงูููุช ุงููุงุฒู (ุจุงูุฏูุงุฆู) ููุญุตูู ุนูู ุงูููุงู ูุงูุนูุฏุฉ",
            "ูู ุญุฏุซ ููุต ูู ุฅูุฏุงุฏุงุช ุงูููุงู ุฎูุงู ุงูุดูุฑ ุงููุงุถูุ",
            " ููุน ุงููุฑุงูู ุงูุตุญูุฉ",
            "ูู ุงููุฑุงูู ุงูุตุญูุฉ ูุดุชุฑูุฉุ",
            "ูู ููุงู ุงุทูุงู ูุชุฑุงูุญ ุงุนูุงุฑูู ุจูู 0 ู 59 ุดูุฑุงู ูุนุงูู ูู ูุตูุฑ ูู ุงูููู ุงู ูุนุงูู ูู ููุต ูู ุงููุฒู ",
            " ูู ููุงู ุฅูุฑุฃุฉ ูู ุงูุงุณุฑุฉ ุงูุฌุจุช ุทููุงู ุญูุงู ุฎูุงู ุงูุนุงููู ุงูุณุงุจููู ุนูุฏูุง ูุงูุช ุฏูู ุณู 18 ุนุงูุงู",
            "ูู ููุงู ุงุทูุงู ูุชุฑุงูุญ ุงุนูุงุฑูู ุจูู 12 ู35 ุดูุฑุงู ููู ูุชูููุง ุฌุฑุนุงุช ููุงุญ DPT1 ู DPT2 ู DPT3 ",
            "ูู ุชููุช ุงูุฃู ุงูุฑุนุงูุฉ ุงูุตุญูุฉ  ุงููุงุฒูุฉ ุฎูุงู ูุชุฑุฉ ุงูุญูู (ุฒูุงุฑุฉ ุงูุทูุจูุจ ุนูู ุงูุงูู 4 ูุฑุงุช )",
            "ูู ููุงู ุงูุฑุฃุฉ ูู ุงุณุฑุชู ูู ุชูุฏ ุชุญุช ุฅุฑุงู ููุงุฏุฑ ุตุญูุฉ ูุคููุฉ",
            "ูู ููุงู ุทูู ูุชุฑุงูุญ ุนูุฑู ุจูู 6 ู 12 ุนุงูุงู ูุง ูุฐูุจ ุงูู ุงููุฏุฑุณุฉ",
            " ูู ููุงู ุทูู ูุชุฑุงูุญ ุนูุฑู ุจูู 14 ู 17 ุนุงูุงู ูู ูููู ุงูุณููุงุช ุงูุณุช ุงูุฃููู ูู ุงูุชุนููู",
            "ูู ููุงู ุทูู ููู ูุณุชูุงู ุงูุฏุฑุงุณู ุนู ุงููุณุชูู ุงูููุงุณุจ ูุนูุฑู ุจุฃูุซุฑ ูู ุนุงููู",
            "ูู ููุงู ุงุญุฏ ูู ุงูุฑุงุฏ ุงูุงุณุฑุฉ ุนูู ุงูุฃูู ุชุชุฌุงูุฒ ุงุนูุงุฑูู 17 ุนุงูุงู ูู ูููููุง ุงูุณููุงุช ุงูุณุช ุงูุฃููู ูู ุงูุชุนููู "
        ]
    })

   st.subheader("โน๏ธ ุชุนุฑููุงุช ุงููุชุบูุฑุงุช")
   st.table(instructions)

    # ๐น ุฌุฏูู ุงูุชุนูููุงุช ูู ุงูุฃุนูู
   instructions = pd.DataFrame({
        "ุงููุชุบูุฑ": ["HH48A_HC3", "FC6A", "HC7A", "HC7B", "HC8", "HC9A", 
                    "HC9B", "HC9C", "HC10B", "HC10C", "HC10E", "HC11", "HC12", "HC13", "HC14", "HC15", "HC17",
                    "EU4", "WS1", "WS7", "WS11", "WS15", "NU_malnutrition_hh", "HE_immune_hh", "HE_antecare_hh", "HE_birthassist_hh",
                        "ED_attendance_hh", "ED_completion_hh:", "ED_gradeforage_hh", "ED_adult_hh"],
        "ุงููุตู": [
            "ูุญุณุจ ุงูุทูู ุงูุฐู ูุชุฑุงูุญ ุนูุฑู ุจูู 0 ู 4 ุงุนูุงู ูุตู ูุฑุฏ ููุง ุฏูู ุฐูู ูุนุชุจุฑ ูุฑุฏ",
            "  ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            "ูุนูุ ุดุจูุฉ ุฎุงุตุฉ โ 3  ูุนูุ ุฎุงุฑุฌ ุงูุดุจูุฉ (ูููุฏ/ูุธุงู ูุนุฒูู) โ 2  ูุนูุ ุดุจูุฉ ูุชุฑุงุจุทุฉ โ 1  ูุง ููุฑุจุงุก โ 0 ูุนูุ ุทุงูุฉ ุดูุณูุฉ โ 4",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง ูุณุชุฎุฏู ูููุฏ ุตูุจ โ 0  ,ูุณุชุฎุฏู ูููุฏ ุตูุจ โ 1",
            " ููุงู ุจุงูุฃูุงุจูุจ: ููุงู ููุตููุฉ ุฅูู ุงููุณูู โ 5  ููุงู ูุนุจุฃุฉ ูู ุฃููุงุณโ 4 ููุงู ูุนุจุฃุฉ: ููุงู ูุนุจุฃุฉ โ 3  ุจุฆุฑ ูุญููุฑ: ุจุฆุฑ ุบูุฑ ูุญููโ 2  ุจุฆุฑ ูุญููุฑ: ุจุฆุฑ ูุญููโ 1  ุนุฑุจุฉ ุจุฎุฒุงู ุตุบูุฑโ 0   ุจุฆุฑ ุฃูุจูุจู / ุจุฆุฑ ุญูุฑ โ 14  ุดุงุญูุฉ ุตูุฑูุฌ โ 13  ููุงู ุณุทุญูุฉ (ููุฑุ ุณุฏุ ุจุญูุฑุฉุ ุจุฑูุฉุ ูุฌุฑู ูุงุฆูุ ููุงุฉุ ููุงุฉ ุฑู)โ 12  ูุจุน ุบูุฑ ูุญูู โ 11  ูุจุน ูุญูู โ 10  ููุงู ุงูุฃูุทุงุฑ โ9   ููุงู ุจุงูุฃูุงุจูุจ: ุตูุจูุฑ ุนุงู/ุฃูุจูุจ ุนููุฏู  โ 8  ููุงู ุจุงูุฃูุงุจูุจ: ููุงู ุฅูู ุงูููุงุก/ูุทุนุฉ ุงูุฃุฑุถ โ 7  ููุงู ุจุงูุฃูุงุจูุจ: ููุงู ุฅูู ุงูุฌุงุฑ โ 6",
            " ูุงุ ุฏุงุฆููุง ูุงูู โ 0  ูุนูุ ูุฑุฉ ูุงุญุฏุฉ ุนูู ุงูุฃููโ 1",
            " ูุฑุญุงุถ ุงูุญูุฑุฉ: ูุฑุญุงุถ ุงูุญูุฑุฉ ุงูููุญุณูู ุงูููููู โ 8 ูุฑุญุงุถ ุงูุญูุฑุฉ: ูุฑุญุงุถ ุงูุญูุฑุฉ ุจุฏูู ุจูุงุทุฉ / ุญูุฑุฉ ููุชูุญุฉ โ 7  ูุฑุญุงุถ ุงูุญูุฑุฉ: ูุฑุญุงุถ ุงูุญูุฑุฉ ูุน ุจูุงุทุฉ โ 6  ูุง ููุฌุฏ ูุฑูู / ุดุฌูุฑุฉ / ุญููโ 5  ุดุทู/ุตุจ: ุดุทู ุฅูู ูุฑุญุงุถ ุงูุญูุฑุฉ โ 4  ุดุทู/ุตุจ: ุดุทู ุฅูู ูุธุงู ุงูุตุฑู ุงูุตุญู โ 3  ุดุทู/ุตุจ: ุดุทู ุฅูู ูุตุฑู ููุชูุญ โ 2  ุดุทู/ุตุจ: ุดุทู ุฅูู ุญูุซ ูุง ุงุนุฑู โ 1  ุฏูู โ 0",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1",
            " ูุง โ 0  ูุนู โ 1"
        ]
    })

   st.subheader("โน๏ธ ุชุนูููุงุช ุงูุฅุฏุฎุงู")
   st.table(instructions)

   st.info("ูู ุงูุดุฑูุท ุงูุฌุงูุจู ูููู ุตูุญุฉ: ุงุฑูุน ุงููููุฐุฌ ูุนููุฉ ููุจูุงูุงุช ุฅู ุฑุบุจุช. ุซู ุงุชุจุน ุงูุฎุทูุงุช ุงูุธุงูุฑุฉ.")
   st.markdown("---")
   st.markdown("ุงุจุฏุฃ ูู ุชุจููุจ ุงูุตูุญุงุช ูู ุงูุดุฑูุท ุงูุฌุงูุจู ๐")
#_____________________________________________________________________________________________
# ุงููุงุฌูุฉ ุงูุซุงููุฉ
elif pages == "๐ฅ ุชูุจุฃ ุจุฃุณุฑุฉ ูุงุญุฏุฉ":

    st.set_page_config(page_title="ุชูุจุค ุตู ููุฑุฏ", page_icon="๐ข", layout="wide")

    st.title("๐ข ุชูุจุค ุฃุณุฑุฉ ูุงุญุฏุฉ")
    st.caption("ุงุฏุฎู ุจูุงูุงุช ุฃุณุฑุฉ ูุงุญุฏุฉ ูุงุญุตู ุนูู ุงูุชูุจุค ููุฑุงู")

    # --------------------------
    # ุฅุนุฏุงุฏ ุงููููุฐุฌ
    # --------------------------
    MODEL_PATH = "model/gboosting_model 25-9-2025.joblib"

    @st.cache_resource
    def load_model():
        try:
            obj = joblib.load(MODEL_PATH)
            # ุฅุฐุง ุญูุธุช ูุงููุณ ูุญุชูู pipeline
            if isinstance(obj, dict) and "pipeline" in obj:
                return obj["pipeline"]
            return obj
        except Exception as e:
            st.error(f"ุชุนุฐุฑ ุชุญููู ุงููููุฐุฌ: {e}")
            return None

    model = load_model()
    if model is not None:
        st.success("ุชู ุชุญููู ุงููููุฐุฌ ุจูุฌุงุญ โ")
    else:
        st.stop()  # ุชููู ุฅุฐุง ุงููููุฐุฌ ูู ููุญููู

    # --------------------------
    # ุชุฌููุฒ ุงููุฎุทุท (schema)
    # --------------------------
    expected_cols = feature_names_from_model(model)
    schema = [{"name": c, "type": "numeric"} for c in expected_cols]  # ุงูุชุฑุงุถ ุฌููุน ุงูุฃุนูุฏุฉ ุฑูููุฉ

    st.subheader("๐งพ ุฃุฏุฎู ุงูููู")
    cols = st.columns(6)
    values = {}

    for i, item in enumerate(schema):
        name = item["name"]
        typ = item.get("type", "text")
        choices = item.get("choices", None)
        with cols[i % 6]:
            if typ == "integer":
                values[name] = st.number_input(f"{name}", value=0, step=1)
            elif typ == "numeric":
                values[name] = st.number_input(f"{name}", min_value=0, step=1)
            elif typ == "category" and choices:
                values[name] = st.selectbox(f"{name}", choices=choices)
            else:
                values[name] = st.text_input(f"{name}", value="")

    # ุชุญููู ุงูููู ุฅูู DataFrame
    row_df = pd.DataFrame([values])
    row_df = cast_inputs(row_df, schema)

    # --------------------------
    # ุฒุฑ ุงูุชูุจุค
    # --------------------------
    if st.button("ุชูููุฐ ุงูุชูุจุค ุงูุขู โ", use_container_width=True):
        try:
            out = predict_with_model(model, row_df)
            y_pred = out.get("y_pred")
            st.success(f"ุงููุงุชุฌ: **{y_pred[0]}**")

            if "y_proba" in out:
                proba = out["y_proba"]
                class_names = out.get("class_names")
                proba_df = pd.DataFrame(
                    proba,
                    columns=[str(c) for c in (class_names if class_names is not None else range(proba.shape[1]))]
                )
                st.dataframe(proba_df.style.format("{:.3f}"))

            with st.expander("ุนุฑุถ ุจูุงูุงุช ุงูุฅุฏุฎุงู ููุง ุงุณุชูุจููุง ุงููููุฐุฌ"):
                st.dataframe(row_df)

        except Exception as e:
            st.error(f"ุญุตู ุฎุทุฃ ุฃุซูุงุก ุงูุชูุจุค: {e}")


#_____________________________________________________________________________________________
# ุงููุงุฌูุฉ ุงูุซุงูุซุฉ
elif pages == "๐ ุชูุจุฃ ูุฃูุซุฑ ูู ุงุณุฑุฉ ูุงุญุฏุฉ":
    st.set_page_config(page_title="ุชูุจุค ุฏูุนู (ููู Excel/CSV)", page_icon="๐", layout="wide")

    st.title("๐ ุชูุจุค ูุนุฏุฏ ูุจูุฑุฉ ูู ุงูุฃุณุฑ ุนูู ููู Excel/CSV")
    st.caption("ุณูุถูู ุนููุฏุงู ุฌุฏูุฏุงู ุจุงูุชูุจุคุงุช ูุน ุฎูุงุฑ ุชูุฒูู ุงูููู ุงูููุงุฆู.")

    #-----------------------------------------
    # ุชุญููู ุงููููุฐุฌ ูู ููู ูุญูู
    #-----------------------------------------
    MODEL_PATH = "model/gboosting_model 25-9-2025.joblib"

    @st.cache_resource
    def load_local_model(path):
        try:
            obj = joblib.load(path)
            # ุฅุฐุง ุญูุธุช ูุงููุณ ูุญุชูู pipeline
            if isinstance(obj, dict) and "pipeline" in obj:
                model = obj["pipeline"]
                feature_order = obj.get("feature_order", None)
            else:
                model = obj
                feature_order = None
            return model, feature_order
        except Exception as e:
            st.error(f"ุชุนุฐุฑ ุชุญููู ุงููููุฐุฌ: {e}")
            return None, None

    model, feature_order = load_local_model(MODEL_PATH)
    if model is None:
        st.stop()
    st.success("ุชู ุชุญููู ุงููููุฐุฌ ุจูุฌุงุญ โ")

    #-----------------------------------------
    # ุฑูุน ููู ุงูุจูุงูุงุช
    #-----------------------------------------
    uploaded = st.file_uploader("ุงุฑูุน ููู ุงูุจูุงูุงุช (Excel/CSV)", type=["xlsx", "xls", "csv"], key="uploader_data")

    if uploaded is None:
        st.stop()

    try:
        df = read_table(uploaded)
    except Exception as e:
        st.error(f"ุชุนุฐุฑ ูุฑุงุกุฉ ุงูููู: {e}")
        st.stop()

    st.write("ุญุฌู ุงูุจูุงูุงุช:", df.shape)
    st.dataframe(df.head(20))

    #-----------------------------------------
    # ุงุฎุชูุงุฑ ุงูุฃุนูุฏุฉ
    #-----------------------------------------
    expected = feature_names_from_model(model)
    st.subheader("๐ง ุงุฎุชูุงุฑ ุงูุฃุนูุฏุฉ ุงููุณุชุฎุฏูุฉ ูู ุงูุชูุจุค")
    default_cols = [c for c in df.columns if c in expected] if expected is not None else list(df.columns)
    help_txt = "ุชู ุงูุชุฑุงุญ ุงูุฃุนูุฏุฉ ุงููุชููุนุฉ ูู ุงููููุฐุฌ. ููููู ุชุนุฏูููุง." if expected is not None else "ุณูุณุชุฎุฏู ุฌููุน ุงูุฃุนูุฏุฉ ุงูุชุฑุงุถูุงู."
    selected_cols = st.multiselect("ุงูุฃุนูุฏุฉ ุงูุฏุงุฎูุฉ ุฅูู ุงููููุฐุฌ:", options=list(df.columns), default=default_cols, help=help_txt)

    if not selected_cols:
        st.warning("ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุฃุนูุฏุฉ ุนูู ุงูุฃูู.")
        st.stop()

    X = df[selected_cols].copy()
    schema = [{"name": c, "type": "numeric" if pd.api.types.is_numeric_dtype(X[c]) else "text"} for c in selected_cols]
    X_cast = cast_inputs(X, schema)

    #-----------------------------------------
    # ุฅุนุฏุงุฏุงุช ุงูุชูุจุค
    #-----------------------------------------
    pred_col_name = st.text_input("ุงุณู ุนููุฏ ุงููุฎุฑุฌุงุช", value="prediction")
    add_proba = st.checkbox("ุฅุถุงูุฉ ุฃุนูุฏุฉ ุงูุงุญุชูุงูุงุช (predict_proba)", value=True)

    #-----------------------------------------
    # ุฒุฑ ุชูููุฐ ุงูุชูุจุค
    #-----------------------------------------
    if st.button("ุชูููุฐ ุงูุชูุจุค ูุฅุถุงูุฉ ุงูุนููุฏ โ", use_container_width=True):
       try:
          def prepare_input(user_df, feature_order):
              missing_cols = [col for col in feature_order if col not in user_df.columns]
              for col in missing_cols:
                  user_df[col] = np.nan
                # ุนุฑุถ ุงูุฃุนูุฏุฉ ุงููุงูุตุฉ ูููุณุชุฎุฏู (ุงุฎุชูุงุฑู)
              if missing_cols:
                    st.warning(f"ุชูุช ุฅุถุงูุฉ ุงูุฃุนูุฏุฉ ุงููุงูุตุฉ ุงูุชุงููุฉ ูู NaN: {missing_cols}")
                # ุฅุนุงุฏุฉ ุงูุชุฑุชูุจ
              return user_df[feature_order]

    # ุฌูุฒ ุงูุจูุงูุงุช
          X_ready = prepare_input(X_cast, feature_order)

        # ููุฐ ุงูุชูุจุค
          out = predict_with_model(model, X_ready)

          y_pred = out["y_pred"]
          out_df = df.copy()
          out_df[pred_col_name] = y_pred

          if add_proba and "y_proba" in out:
              proba = out["y_proba"]
              class_names = out.get("class_names")
              if class_names is None:
                  class_cols = [f"proba_{i}" for i in range(proba.shape[1])]
              else:
                  class_cols = [f"proba_{str(c)}" for c in class_names]
              proba_df = pd.DataFrame(proba, columns=class_cols, index=out_df.index)
              out_df = pd.concat([out_df, proba_df], axis=1)

          st.success("ุชู ุญุณุงุจ ุงูุชูุจุคุงุช ูุฅุถุงูุชูุง ููุฌุฏูู โ")
          st.dataframe(out_df.head(50))

       except Exception as e:
            st.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุงูุชูุจุค: {e}")


        # ุชูุฒูู ูููู Excel
            output_buf = io.BytesIO()
            with pd.ExcelWriter(output_buf, engine="openpyxl") as writer:
               out_df.to_excel(writer, index=False, sheet_name="predictions")
            output_buf.seek(0)
            st.download_button(
              label="โฌ๏ธ ุชูุฒูู ุงูููู (Excel)",
              data=output_buf,
              file_name="predictions_with_output.xlsx",
              mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
              use_container_width=True
        )
       except Exception as e:
          st.error(f"ุญุตู ุฎุทุฃ ุฃุซูุงุก ุงูุชูุจุค: {e}")
